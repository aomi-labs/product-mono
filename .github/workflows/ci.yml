name: CI/CD Pipeline

on:
  push:
    branches: [ main, prod-v3 ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Start Anvil
      run: |
        docker run -d --name anvil-test -p 8545:8545 \
          ghcr.io/foundry-rs/foundry:latest \
          anvil --host 0.0.0.0 --fork-url https://eth-mainnet.public.blastapi.io@22419684

        # Wait for anvil to be ready
        timeout 30 bash -c 'until curl -f http://localhost:8545; do sleep 1; done'
    
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        components: rustfmt, clippy
        override: true

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: aomi-landing/package-lock.json

    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          chatbot/target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Create test environment
      run: |
        cp .env.template .env.dev
        echo "ANTHROPIC_API_KEY=test-key" >> .env.dev
        echo "BRAVE_SEARCH_API_KEY=test-key" >> .env.dev
        echo "ETHERSCAN_API_KEY=test-key" >> .env.dev
        echo "ZEROX_API_KEY=test-key" >> .env.dev

    - name: Test configuration loading
      run: |
        export FORGE_ENV=development
        source scripts/load-config.sh
        echo "âœ… Development config loaded"
        export FORGE_ENV=production  
        source scripts/load-config.sh
        echo "âœ… Production config loaded"

    - name: Format check
      run: cd chatbot && cargo fmt --all -- --check

    - name: Clippy check
      run: cd chatbot && cargo clippy --all-targets --all-features -- -D warnings

    - name: Build Rust
      run: cd chatbot && cargo build --verbose

    - name: Run Rust tests
      run: cd chatbot && cargo test --verbose
      env:
        ANTHROPIC_API_KEY: test-key

    - name: Install frontend dependencies
      run: cd aomi-landing && npm ci

    - name: Build frontend
      run: cd aomi-landing && npm run build

    - name: Test frontend
      run: cd aomi-landing && npm test
      if: false # Skip if no tests yet

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-

    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - uses: actions/checkout@v4

    - name: Deploy to server
      run: |
        echo "ðŸš€ Deployment steps would go here"
        echo "Example: SSH to server, pull image, restart services"
        # ssh deploy@server 'cd /app && docker-compose pull && docker-compose up -d'