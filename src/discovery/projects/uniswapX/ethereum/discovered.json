{
  "name": "uniswap",
  "chain": "ethereum",
  "blockNumber": 22834282,
  "configHash": "0x0c080995e06514149afc6d6643826eb60447388ec25e2eebc932d47999892865",
  "entries": [
    {
      "name": "Permit2",
      "address": "0x000000000022D473030F116dDEE9F6B43aC78BA3",
      "type": "Contract",
      "sourceHashes": [
        "0x84beffbcb4624fb74fab61c80beeb566023a939418284a8f44357b71cd40b63b"
      ],
      "proxyType": "immutable",
      "description": "Permit2 - Unified token approval system for signature-based transfers and allowances",
      "sinceTimestamp": 1668647879,
      "sinceBlock": 15986406,
      "values": {
        "$immutable": true,
        "DOMAIN_SEPARATOR": "0x866a5aba21966af95d6c7ab78eb2b2fc913915c28be3b9aa07cc04ff903e3f28"
      },
      "fieldMeta": {
        "DOMAIN_SEPARATOR": {
          "description": "EIP-712 domain separator for signature verification"
        }
      },
      "implementationNames": {
        "0x000000000022D473030F116dDEE9F6B43aC78BA3": "Permit2"
      }
    },
    {
      "name": "Timelock",
      "address": "0x1a9C8182C09F50C8318d769245beA52c32BE35BC",
      "type": "Contract",
      "sourceHashes": [
        "0xc3a519884c2c5eb5c8fa33e1f7c27bf1576088eddc2d9dd478bd1889a4f7c649"
      ],
      "proxyType": "immutable",
      "description": "Uniswap Timelock - delays governance actions for security",
      "sinceTimestamp": 1600107105,
      "sinceBlock": 10861678,
      "values": {
        "$immutable": true,
        "admin": "0x408ED6354d4973f66138C91495F2f2FCbd8724C3",
        "delay": 172800,
        "GRACE_PERIOD": 1209600,
        "MAXIMUM_DELAY": 2592000,
        "MINIMUM_DELAY": 172800,
        "pendingAdmin": "0x0000000000000000000000000000000000000000"
      },
      "fieldMeta": {
        "admin": {
          "description": "Governor contract that can propose timelock actions"
        },
        "delay": {
          "description": "Minimum delay before timelock actions can be executed (48 hours)"
        },
        "GRACE_PERIOD": {
          "description": "Time window after delay when action can be executed (14 days)"
        },
        "MAXIMUM_DELAY": {
          "description": "Maximum delay that can be set (30 days)"
        },
        "MINIMUM_DELAY": {
          "description": "Minimum delay that can be set (48 hours)"
        }
      },
      "implementationNames": {
        "0x1a9C8182C09F50C8318d769245beA52c32BE35BC": "Timelock"
      }
    },
    {
      "name": "Uni",
      "address": "0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984",
      "type": "Contract",
      "sourceHashes": [
        "0x005d41450e7da29f6913ff9dc83738d960ae222989af4adec6bf24ccdb87aaad"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1600107086,
      "sinceBlock": 10861674,
      "values": {
        "$immutable": true,
        "decimals": 18,
        "DELEGATION_TYPEHASH": "0xe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf",
        "DOMAIN_TYPEHASH": "0x8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a866",
        "minimumTimeBetweenMints": 31536000,
        "mintCap": 2,
        "minter": "0x1a9C8182C09F50C8318d769245beA52c32BE35BC",
        "mintingAllowedAfter": 1704067200,
        "name": "Uniswap",
        "PERMIT_TYPEHASH": "0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9",
        "symbol": "UNI",
        "totalSupply": "1000000000000000000000000000"
      },
      "implementationNames": {
        "0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984": "Uni"
      }
    },
    {
      "name": "UniswapV3Factory",
      "address": "0x1F98431c8aD98523631AE4a59f267346ea31F984",
      "type": "Contract",
      "sourceHashes": [
        "0xae984fd52c3639bc544c6af2f6165f6049fb043a051936e67315dcdf406f0889"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1620156420,
      "sinceBlock": 12369621,
      "values": {
        "$immutable": true,
        "owner": "0x1a9C8182C09F50C8318d769245beA52c32BE35BC",
        "parameters": {
          "factory": "0x0000000000000000000000000000000000000000",
          "token0": "0x0000000000000000000000000000000000000000",
          "token1": "0x0000000000000000000000000000000000000000",
          "fee": 0,
          "tickSpacing": 0
        }
      },
      "implementationNames": {
        "0x1F98431c8aD98523631AE4a59f267346ea31F984": "UniswapV3Factory"
      }
    },
    {
      "address": "0x23122238253343Ea36088Ee1F19951904594506f",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "GovernorBravoDelegator",
      "address": "0x408ED6354d4973f66138C91495F2f2FCbd8724C3",
      "type": "Contract",
      "sourceHashes": [
        "0x92c0e08160dd99ea5e08e262c7d056f8fdc6a795e7ab444557bdf28f20a3c4d2",
        "0x83c5ec957bf892e1f80953f9908380c73053d2aac32bbb47f6cc134b69ccba7c"
      ],
      "proxyType": "call implementation proxy",
      "description": "Uniswap Governor Bravo Delegator - proxy contract for governance that stores actual governance state",
      "sinceTimestamp": 1629421922,
      "sinceBlock": 13059157,
      "values": {
        "$implementation": "0x53a328F4086d7C0F1Fa19e594c9b842125263026",
        "admin": "0x1a9C8182C09F50C8318d769245beA52c32BE35BC",
        "BALLOT_TYPEHASH": "0x150214d74d59b7d1e90c73fc22ef3d991dd0a76b046543d4d80ab92d2a50328f",
        "DOMAIN_TYPEHASH": "0x8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a866",
        "getActions": [
          {
            "targets": ["0x1F98431c8aD98523631AE4a59f267346ea31F984"],
            "values": [0],
            "signatures": ["enableFeeAmount(uint24,int24)"],
            "calldatas": [
              "0x00000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000001"
            ]
          },
          {
            "targets": ["0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984"],
            "values": [0],
            "signatures": ["transfer(address,uint256)"],
            "calldatas": [
              "0x0000000000000000000000005e14ed9dcee22ba758e8de482301028b261c4a140000000000000000000000000000000000000000000000000000000000000000"
            ]
          }
        ],
        "implementation": "0x53a328F4086d7C0F1Fa19e594c9b842125263026",
        "initialProposalId": 8,
        "MAX_PROPOSAL_THRESHOLD": "10000000000000000000000000",
        "MAX_VOTING_DELAY": 40320,
        "MAX_VOTING_PERIOD": 80640,
        "MIN_PROPOSAL_THRESHOLD": "1000000000000000000000000",
        "MIN_VOTING_DELAY": 1,
        "MIN_VOTING_PERIOD": 5760,
        "name": "Uniswap Governor Bravo",
        "pendingAdmin": "0x0000000000000000000000000000000000000000",
        "proposalCount": 89,
        "proposalMaxOperations": 10,
        "proposals": [
          {
            "id": 0,
            "proposer": "0x0000000000000000000000000000000000000000",
            "eta": 0,
            "startBlock": 0,
            "endBlock": 0,
            "forVotes": 0,
            "againstVotes": 0,
            "abstainVotes": 0,
            "canceled": false,
            "executed": false
          },
          {
            "id": 1,
            "proposer": "0x81A7f10003D5cA866da96299Ff1D3C673afcc138",
            "eta": 0,
            "startBlock": 13142656,
            "endBlock": 13182976,
            "forVotes": 0,
            "againstVotes": 0,
            "abstainVotes": 0,
            "canceled": false,
            "executed": false
          },
          {
            "id": 2,
            "proposer": "0x23122238253343Ea36088Ee1F19951904594506f",
            "eta": 0,
            "startBlock": 13142679,
            "endBlock": 13182999,
            "forVotes": 0,
            "againstVotes": 0,
            "abstainVotes": 0,
            "canceled": false,
            "executed": false
          },
          {
            "id": 3,
            "proposer": "0x4caBB1Dd23515747c483A95Ef2B60731699cEaea",
            "eta": 0,
            "startBlock": 13142692,
            "endBlock": 13183012,
            "forVotes": 0,
            "againstVotes": 0,
            "abstainVotes": 0,
            "canceled": false,
            "executed": false
          },
          {
            "id": 4,
            "proposer": "0xb4428B8f878d60834BB2126C56735D0827A7ccda",
            "eta": 0,
            "startBlock": 13142716,
            "endBlock": 13183036,
            "forVotes": 0,
            "againstVotes": 0,
            "abstainVotes": 0,
            "canceled": false,
            "executed": false
          }
        ],
        "proposalThreshold": "1000000000000000000000000",
        "quorumVotes": "40000000000000000000000000",
        "state": [],
        "timelock": "0x1a9C8182C09F50C8318d769245beA52c32BE35BC",
        "uni": "0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984",
        "votingDelay": 13140,
        "votingPeriod": 40320
      },
      "errors": { "votingReceipts": "Processing error occurred." },
      "fieldMeta": {
        "admin": {
          "description": "Timelock contract that controls the governor"
        },
        "implementation": {
          "description": "GovernorBravoDelegate implementation contract"
        },
        "pendingAdmin": { "description": "Pending admin change" }
      },
      "implementationNames": {
        "0x408ED6354d4973f66138C91495F2f2FCbd8724C3": "GovernorBravoDelegator",
        "0x53a328F4086d7C0F1Fa19e594c9b842125263026": "GovernorBravoDelegate"
      }
    },
    {
      "address": "0x4caBB1Dd23515747c483A95Ef2B60731699cEaea",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "DutchOrderReactor",
      "address": "0x6000da47483062A0D734Ba3dc7576Ce6A0B645C4",
      "type": "Contract",
      "sourceHashes": [
        "0xe053c52a761f14cf423c6c822034f1a699fd6604241a6125bfcfe456006055de"
      ],
      "proxyType": "immutable",
      "description": "Uniswap V4 Dutch Order Reactor - handles Dutch auction style orders for token swaps with exclusive filler rights",
      "sinceTimestamp": 1690383395,
      "sinceBlock": 17777988,
      "values": {
        "$immutable": true,
        "feeController": "0x0000000000000000000000000000000000000000",
        "feeControllerHistory": [],
        "owner": "0x1a9C8182C09F50C8318d769245beA52c32BE35BC",
        "ownershipHistory": ["0x1a9C8182C09F50C8318d769245beA52c32BE35BC"],
        "permit2": "0x000000000022D473030F116dDEE9F6B43aC78BA3"
      },
      "fieldMeta": {
        "owner": {
          "description": "Timelock contract that controls the reactor"
        },
        "permit2": {
          "description": "Permit2 contract for signature-based token approvals"
        },
        "feeController": {
          "description": "Protocol fee controller for collecting fees on orders"
        }
      },
      "implementationNames": {
        "0x6000da47483062A0D734Ba3dc7576Ce6A0B645C4": "ExclusiveDutchOrderReactor"
      }
    },
    {
      "address": "0x81A7f10003D5cA866da96299Ff1D3C673afcc138",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "0xb4428B8f878d60834BB2126C56735D0827A7ccda",
      "type": "EOA",
      "proxyType": "EOA"
    }
  ],
  "abis": {
    "0x000000000022D473030F116dDEE9F6B43aC78BA3": [
      "error AllowanceExpired(uint256 deadline)",
      "error ExcessiveInvalidation()",
      "error InsufficientAllowance(uint256 amount)",
      "error InvalidAmount(uint256 maxAmount)",
      "error InvalidContractSignature()",
      "error InvalidNonce()",
      "error InvalidSignature()",
      "error InvalidSignatureLength()",
      "error InvalidSigner()",
      "error LengthMismatch()",
      "error SignatureExpired(uint256 signatureDeadline)",
      "event Approval(address indexed owner, address indexed token, address indexed spender, uint160 amount, uint48 expiration)",
      "event Lockdown(address indexed owner, address token, address spender)",
      "event NonceInvalidation(address indexed owner, address indexed token, address indexed spender, uint48 newNonce, uint48 oldNonce)",
      "event Permit(address indexed owner, address indexed token, address indexed spender, uint160 amount, uint48 expiration, uint48 nonce)",
      "event UnorderedNonceInvalidation(address indexed owner, uint256 word, uint256 mask)",
      "function DOMAIN_SEPARATOR() view returns (bytes32)",
      "function allowance(address, address, address) view returns (uint160 amount, uint48 expiration, uint48 nonce)",
      "function approve(address token, address spender, uint160 amount, uint48 expiration)",
      "function invalidateNonces(address token, address spender, uint48 newNonce)",
      "function invalidateUnorderedNonces(uint256 wordPos, uint256 mask)",
      "function lockdown(tuple(address token, address spender)[] approvals)",
      "function nonceBitmap(address, uint256) view returns (uint256)",
      "function permit(address owner, tuple(tuple(address token, uint160 amount, uint48 expiration, uint48 nonce)[] details, address spender, uint256 sigDeadline) permitBatch, bytes signature)",
      "function permit(address owner, tuple(tuple(address token, uint160 amount, uint48 expiration, uint48 nonce) details, address spender, uint256 sigDeadline) permitSingle, bytes signature)",
      "function permitTransferFrom(tuple(tuple(address token, uint256 amount) permitted, uint256 nonce, uint256 deadline) permit, tuple(address to, uint256 requestedAmount) transferDetails, address owner, bytes signature)",
      "function permitTransferFrom(tuple(tuple(address token, uint256 amount)[] permitted, uint256 nonce, uint256 deadline) permit, tuple(address to, uint256 requestedAmount)[] transferDetails, address owner, bytes signature)",
      "function permitWitnessTransferFrom(tuple(tuple(address token, uint256 amount) permitted, uint256 nonce, uint256 deadline) permit, tuple(address to, uint256 requestedAmount) transferDetails, address owner, bytes32 witness, string witnessTypeString, bytes signature)",
      "function permitWitnessTransferFrom(tuple(tuple(address token, uint256 amount)[] permitted, uint256 nonce, uint256 deadline) permit, tuple(address to, uint256 requestedAmount)[] transferDetails, address owner, bytes32 witness, string witnessTypeString, bytes signature)",
      "function transferFrom(tuple(address from, address to, uint160 amount, address token)[] transferDetails)",
      "function transferFrom(address from, address to, uint160 amount, address token)"
    ],
    "0x1a9C8182C09F50C8318d769245beA52c32BE35BC": [
      "constructor(address admin_, uint256 delay_)",
      "event CancelTransaction(bytes32 indexed txHash, address indexed target, uint256 value, string signature, bytes data, uint256 eta)",
      "event ExecuteTransaction(bytes32 indexed txHash, address indexed target, uint256 value, string signature, bytes data, uint256 eta)",
      "event NewAdmin(address indexed newAdmin)",
      "event NewDelay(uint256 indexed newDelay)",
      "event NewPendingAdmin(address indexed newPendingAdmin)",
      "event QueueTransaction(bytes32 indexed txHash, address indexed target, uint256 value, string signature, bytes data, uint256 eta)",
      "function GRACE_PERIOD() view returns (uint256)",
      "function MAXIMUM_DELAY() view returns (uint256)",
      "function MINIMUM_DELAY() view returns (uint256)",
      "function acceptAdmin()",
      "function admin() view returns (address)",
      "function cancelTransaction(address target, uint256 value, string signature, bytes data, uint256 eta)",
      "function delay() view returns (uint256)",
      "function executeTransaction(address target, uint256 value, string signature, bytes data, uint256 eta) payable returns (bytes)",
      "function pendingAdmin() view returns (address)",
      "function queueTransaction(address target, uint256 value, string signature, bytes data, uint256 eta) returns (bytes32)",
      "function queuedTransactions(bytes32) view returns (bool)",
      "function setDelay(uint256 delay_)",
      "function setPendingAdmin(address pendingAdmin_)"
    ],
    "0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984": [
      "constructor(address account, address minter_, uint256 mintingAllowedAfter_)",
      "event Approval(address indexed owner, address indexed spender, uint256 amount)",
      "event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate)",
      "event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance)",
      "event MinterChanged(address minter, address newMinter)",
      "event Transfer(address indexed from, address indexed to, uint256 amount)",
      "function DELEGATION_TYPEHASH() view returns (bytes32)",
      "function DOMAIN_TYPEHASH() view returns (bytes32)",
      "function PERMIT_TYPEHASH() view returns (bytes32)",
      "function allowance(address account, address spender) view returns (uint256)",
      "function approve(address spender, uint256 rawAmount) returns (bool)",
      "function balanceOf(address account) view returns (uint256)",
      "function checkpoints(address, uint32) view returns (uint32 fromBlock, uint96 votes)",
      "function decimals() view returns (uint8)",
      "function delegate(address delegatee)",
      "function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s)",
      "function delegates(address) view returns (address)",
      "function getCurrentVotes(address account) view returns (uint96)",
      "function getPriorVotes(address account, uint256 blockNumber) view returns (uint96)",
      "function minimumTimeBetweenMints() view returns (uint32)",
      "function mint(address dst, uint256 rawAmount)",
      "function mintCap() view returns (uint8)",
      "function minter() view returns (address)",
      "function mintingAllowedAfter() view returns (uint256)",
      "function name() view returns (string)",
      "function nonces(address) view returns (uint256)",
      "function numCheckpoints(address) view returns (uint32)",
      "function permit(address owner, address spender, uint256 rawAmount, uint256 deadline, uint8 v, bytes32 r, bytes32 s)",
      "function setMinter(address minter_)",
      "function symbol() view returns (string)",
      "function totalSupply() view returns (uint256)",
      "function transfer(address dst, uint256 rawAmount) returns (bool)",
      "function transferFrom(address src, address dst, uint256 rawAmount) returns (bool)"
    ],
    "0x1F98431c8aD98523631AE4a59f267346ea31F984": [
      "constructor()",
      "event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing)",
      "event OwnerChanged(address indexed oldOwner, address indexed newOwner)",
      "event PoolCreated(address indexed token0, address indexed token1, uint24 indexed fee, int24 tickSpacing, address pool)",
      "function createPool(address tokenA, address tokenB, uint24 fee) returns (address pool)",
      "function enableFeeAmount(uint24 fee, int24 tickSpacing)",
      "function feeAmountTickSpacing(uint24) view returns (int24)",
      "function getPool(address, address, uint24) view returns (address)",
      "function owner() view returns (address)",
      "function parameters() view returns (address factory, address token0, address token1, uint24 fee, int24 tickSpacing)",
      "function setOwner(address _owner)"
    ],
    "0x408ED6354d4973f66138C91495F2f2FCbd8724C3": [
      "constructor(address timelock_, address uni_, address admin_, address implementation_, uint256 votingPeriod_, uint256 votingDelay_, uint256 proposalThreshold_)",
      "event NewAdmin(address oldAdmin, address newAdmin)",
      "event NewImplementation(address oldImplementation, address newImplementation)",
      "event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin)",
      "event ProposalCanceled(uint256 id)",
      "event ProposalCreated(uint256 id, address proposer, address[] targets, uint256[] values, string[] signatures, bytes[] calldatas, uint256 startBlock, uint256 endBlock, string description)",
      "event ProposalExecuted(uint256 id)",
      "event ProposalQueued(uint256 id, uint256 eta)",
      "event ProposalThresholdSet(uint256 oldProposalThreshold, uint256 newProposalThreshold)",
      "event VoteCast(address indexed voter, uint256 proposalId, uint8 support, uint256 votes, string reason)",
      "event VotingDelaySet(uint256 oldVotingDelay, uint256 newVotingDelay)",
      "event VotingPeriodSet(uint256 oldVotingPeriod, uint256 newVotingPeriod)",
      "function _setImplementation(address implementation_)",
      "function admin() view returns (address)",
      "function implementation() view returns (address)",
      "function pendingAdmin() view returns (address)"
    ],
    "0x53a328F4086d7C0F1Fa19e594c9b842125263026": [
      "event NewAdmin(address oldAdmin, address newAdmin)",
      "event NewImplementation(address oldImplementation, address newImplementation)",
      "event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin)",
      "event ProposalCanceled(uint256 id)",
      "event ProposalCreated(uint256 id, address proposer, address[] targets, uint256[] values, string[] signatures, bytes[] calldatas, uint256 startBlock, uint256 endBlock, string description)",
      "event ProposalExecuted(uint256 id)",
      "event ProposalQueued(uint256 id, uint256 eta)",
      "event ProposalThresholdSet(uint256 oldProposalThreshold, uint256 newProposalThreshold)",
      "event VoteCast(address indexed voter, uint256 proposalId, uint8 support, uint256 votes, string reason)",
      "event VotingDelaySet(uint256 oldVotingDelay, uint256 newVotingDelay)",
      "event VotingPeriodSet(uint256 oldVotingPeriod, uint256 newVotingPeriod)",
      "function BALLOT_TYPEHASH() view returns (bytes32)",
      "function DOMAIN_TYPEHASH() view returns (bytes32)",
      "function MAX_PROPOSAL_THRESHOLD() view returns (uint256)",
      "function MAX_VOTING_DELAY() view returns (uint256)",
      "function MAX_VOTING_PERIOD() view returns (uint256)",
      "function MIN_PROPOSAL_THRESHOLD() view returns (uint256)",
      "function MIN_VOTING_DELAY() view returns (uint256)",
      "function MIN_VOTING_PERIOD() view returns (uint256)",
      "function _acceptAdmin()",
      "function _initiate(uint256 proposalCount)",
      "function _setPendingAdmin(address newPendingAdmin)",
      "function _setProposalThreshold(uint256 newProposalThreshold)",
      "function _setVotingDelay(uint256 newVotingDelay)",
      "function _setVotingPeriod(uint256 newVotingPeriod)",
      "function admin() view returns (address)",
      "function cancel(uint256 proposalId)",
      "function castVote(uint256 proposalId, uint8 support)",
      "function castVoteBySig(uint256 proposalId, uint8 support, uint8 v, bytes32 r, bytes32 s)",
      "function castVoteWithReason(uint256 proposalId, uint8 support, string reason)",
      "function execute(uint256 proposalId) payable",
      "function getActions(uint256 proposalId) view returns (address[] targets, uint256[] values, string[] signatures, bytes[] calldatas)",
      "function getReceipt(uint256 proposalId, address voter) view returns (tuple(bool hasVoted, uint8 support, uint96 votes))",
      "function implementation() view returns (address)",
      "function initialProposalId() view returns (uint256)",
      "function initialize(address timelock_, address uni_, uint256 votingPeriod_, uint256 votingDelay_, uint256 proposalThreshold_)",
      "function latestProposalIds(address) view returns (uint256)",
      "function name() view returns (string)",
      "function pendingAdmin() view returns (address)",
      "function proposalCount() view returns (uint256)",
      "function proposalMaxOperations() view returns (uint256)",
      "function proposalThreshold() view returns (uint256)",
      "function proposals(uint256) view returns (uint256 id, address proposer, uint256 eta, uint256 startBlock, uint256 endBlock, uint256 forVotes, uint256 againstVotes, uint256 abstainVotes, bool canceled, bool executed)",
      "function propose(address[] targets, uint256[] values, string[] signatures, bytes[] calldatas, string description) returns (uint256)",
      "function queue(uint256 proposalId)",
      "function quorumVotes() view returns (uint256)",
      "function state(uint256 proposalId) view returns (uint8)",
      "function timelock() view returns (address)",
      "function uni() view returns (address)",
      "function votingDelay() view returns (uint256)",
      "function votingPeriod() view returns (uint256)"
    ],
    "0x6000da47483062A0D734Ba3dc7576Ce6A0B645C4": [
      "constructor(address _permit2, address _protocolFeeOwner)",
      "error DeadlineBeforeEndTime()",
      "error DeadlinePassed()",
      "error DuplicateFeeOutput(address duplicateToken)",
      "error EndTimeBeforeStartTime()",
      "error FeeTooLarge(address token, uint256 amount, address recipient)",
      "error IncorrectAmounts()",
      "error InputAndOutputDecay()",
      "error InsufficientEth()",
      "error InvalidFeeToken(address feeToken)",
      "error InvalidReactor()",
      "error NativeTransferFailed()",
      "error NoExclusiveOverride()",
      "error OrderEndTimeBeforeStartTime()",
      "event Fill(bytes32 indexed orderHash, address indexed filler, address indexed swapper, uint256 nonce)",
      "event OwnershipTransferred(address indexed user, address indexed newOwner)",
      "event ProtocolFeeControllerSet(address oldFeeController, address newFeeController)",
      "function execute(tuple(bytes order, bytes sig) order) payable",
      "function executeBatch(tuple(bytes order, bytes sig)[] orders) payable",
      "function executeBatchWithCallback(tuple(bytes order, bytes sig)[] orders, bytes callbackData) payable",
      "function executeWithCallback(tuple(bytes order, bytes sig) order, bytes callbackData) payable",
      "function feeController() view returns (address)",
      "function owner() view returns (address)",
      "function permit2() view returns (address)",
      "function setProtocolFeeController(address _newFeeController)",
      "function transferOwnership(address newOwner)"
    ]
  },
  "usedTemplates": {},
  "permissionsConfigHash": "0xec1c2123a1520b440142f36d2792247dfed608fc0a3b1e28fb71dc6546ce8cbd"
}
